/*
 * Generated by Jison 0.4.18
 *
 *
 *
 */

var grammar = {
  "lex": {
    "rules": [
      [
        "\\s+",
        "/* skip whitespace */"
      ],
      [
        "print",
        "return 'PRINT'"
      ],
      [
        "read",
        "return 'READ'"
      ],
      [
        "loop",
        "return 'LOOP'"
      ],
      [
        "while",
        "return 'WHILE'"
      ],
      [
        "for",
        "return 'FOR'"
      ],
      [
        "do",
        "return 'DO'"
      ],
      [
        "end",
        "return 'END'"
      ],
      [
        "if",
        "return 'IF'"
      ],
      [
        "then",
        "return 'THEN'"
      ],
      [
        "else",
        "return 'ELSE'"
      ],
      [
        "function",
        "return 'FUNCTION'"
      ],
      [
        "return",
        "return 'RETURN'"
      ],
      [
        "begin",
        "return 'BEGIN'"
      ],
      [
        "[a-zA-Z][a-zA-Z0-9]*",
        "return 'ID'"
      ],
      [
        "[0-9]+(\\.[0-9]+)?",
        "return 'NUMBER'"
      ],
      [
        "'[^']*'",
        "return 'STRING'"
      ],
      [
        "\"[^\"]*\"",
        "return 'STRING'"
      ],
      [
        "=",
        "return '=' "
      ],
      [
        ">",
        "return '>' "
      ],
      [
        "<",
        "return '<' "
      ],
      [
        "<=",
        "return '<=' "
      ],
      [
        ">=",
        "return '>=' "
      ],
      [
        "==",
        "return '==' "
      ],
      [
        "<>",
        "return '<>' "
      ],
      [
        "\\+",
        "return '+' "
      ],
      [
        "-",
        "return '-' "
      ],
      [
        "&",
        "return '&' "
      ],
      [
        "\\*",
        "return '*' "
      ],
      [
        "/",
        "return '/' "
      ],
      [
        "\\(",
        "return '(' "
      ],
      [
        "\\)",
        "return ')' "
      ],
      [
        ";",
        "return ';' "
      ],
      [
        ",",
        "return ',' "
      ],
      [
        "<<EOF>>",
        "return 'EOF' "
      ]
    ],
    "options": {
      "ranges": true
    }
  },
  "bnf": {
    "program": [
      [
        "statements EOF",
        "return $$ = { type: 'program', statements: $1 };"
      ]
    ],
    "statements": [
      [
        "statementOrBlock statements",
        "return $$ = $1.concat($2);"
      ],
      [
        "statementOrBlock",
        "return $$ = [$1];"
      ]
    ],
    "statementOrBlock": [
      [
        "statement",
        "return $$ = [$1];"
      ],
      [
        "BEGIN statements END",
        "return $$ = $2;"
      ]
    ],
    "statement": [
      [
        "PRINT expression",
        "return $$ = { type: 'print', expression: $2 };"
      ],
      [
        "PRINT expression READ ID",
        "return $$ = { type: 'print_read', expression: $2, id: $4 };"
      ],
      [
        "ID '=' expression",
        "return $$ = { type: 'assignment', id: $1, expression: $3 };"
      ],
      [
        "LOOP statements WHILE expression",
        "return $$ = { type: 'loop', statements: $2, expression: $4 };"
      ],
      [
        "FOR '(' statement ';' expression ';' statement ')' DO statements END",
        "return $$ = { type: 'for', init: $3, condition: $5, update: $7, statements: $10 };"
      ],
      [
        "WHILE expression DO statements END",
        "return $$ = { type: 'while', expression: $2, statements: $4 };"
      ],
      [
        "IF expression THEN statements END",
        "return $$ = { type: 'if', expression: $2, statements: $4 };"
      ],
      [
        "IF expression THEN statements ELSE statements END",
        "return $$ = { type: 'if_else', expression: $2, thenStatements: $4, elseStatements: $6 };"
      ],
      [
        "FUNCTION ID '(' optionalParamList ')' BEGIN statements END",
        "return $$ = { type: 'function', id: $2, params: $4, statements: $7 };"
      ],
      [
        "RETURN expression",
        "return $$ = { type: 'return', expression: $2 };"
      ]
    ],
    "optionalParamList": [
      [
        "paramList",
        "return $$ = $1;"
      ],
      [
        "",
        "return $$ = [];"
      ]
    ],
    "paramList": [
      [
        "ID ',' paramList",
        "return $$ = [$1].concat($3);"
      ],
      [
        "ID",
        "return $$ = [$1];"
      ]
    ],
    "expression": [
      [
        "expression '>' addExp",
        "return $$ = { type: '>', left: $1, right: $3 };"
      ],
      [
        "expression '<' addExp",
        "return $$ = { type: '<', left: $1, right: $3 };"
      ],
      [
        "expression '<=' addExp",
        "return $$ = { type: '<=', left: $1, right: $3 };"
      ],
      [
        "expression '>=' addExp",
        "return $$ = { type: '>=', left: $1, right: $3 };"
      ],
      [
        "expression '==' addExp",
        "return $$ = { type: '==', left: $1, right: $3 };"
      ],
      [
        "expression '<>' addExp",
        "return $$ = { type: '<>', left: $1, right: $3 };"
      ],
      [
        "addExp",
        "return $$ = $1;"
      ]
    ],
    "addExp": [
      [
        "addExp '+' multExp",
        "return $$ = { type: '+', left: $1, right: $3 };"
      ],
      [
        "addExp '-' multExp",
        "return $$ = { type: '-', left: $1, right: $3 };"
      ],
      [
        "addExp '&' multExp",
        "return $$ = { type: '&', left: $1, right: $3 };"
      ],
      [
        "multExp",
        "return $$ = $1;"
      ]
    ],
    "multExp": [
      [
        "multExp '*' negateExp",
        "return $$ = { type: '*', left: $1, right: $3 };"
      ],
      [
        "multExp '/' negateExp",
        "return $$ = { type: '/', left: $1, right: $3 };"
      ],
      [
        "negateExp",
        "return $$ = $1;"
      ]
    ],
    "negateExp": [
      [
        "'-' value",
        "return $$ = { type: '-', value: $2 };"
      ],
      [
        "value",
        "return $$ = $1;"
      ]
    ],
    "value": [
      [
        "ID",
        "return $$ = { type: 'id', value: $1 };"
      ],
      [
        "STRING",
        "return $$ = { type: 'string', value: $1 };"
      ],
      [
        "NUMBER",
        "return $$ = { type: 'number', value: $1 };"
      ],
      [
        "ID '(' optionalArgumentList ')'",
        "return $$ = { type: 'function_call', id: $1, args: $3 };"
      ],
      [
        " '(' expression ')'",
        "return $$ = $2;"
      ]
    ],
    "optionalArgumentList": [
      [
        "argumentList",
        "return $$ = $1;"
      ],
      [
        "",
        "return $$ = [];"
      ]
    ],
    "argumentList": [
      [
        "expression ',' argumentList",
        "return $$ = [$1].concat($3);"
      ],
      [
        "expression",
        "return $$ = [$1];"
      ]
    ]
  },
  "performAction": function anonymous(yy, yy_, $$, $$, $1, $2, $3, $4, $5, $6, $7, $8, $9, _$) {
    var $0 = $$.length - 1;
    switch (_$.index) {
      case 0:
        return $$ = { type: 'program', statements: $1 };
      case 1:
        return $$ = $1.concat($2);
      case 2:
        return $$ = [$1];
      case 3:
        return $$ = [$1];
      case 4:
        return $$ = $2;
      case 5:
        return $$ = { type: 'print', expression: $2 };
      case 6:
        return $$ = { type: 'print_read', expression: $2, id: $4 };
      case 7:
        return $$ = { type: 'assignment', id: $1, expression: $3 };
      case 8:
        return $$ = { type: 'loop', statements: $2, expression: $4 };
      case 9:
        return $$ = { type: 'for', init: $3, condition: $5, update: $7, statements: $10 };
      case 10:
        return $$ = { type: 'while', expression: $2, statements: $4 };
      case 11:
        return $$ = { type: 'if', expression: $2, statements: $4 };
      case 12:
        return $$ = { type: 'if_else', expression: $2, thenStatements: $4, elseStatements: $6 };
      case 13:
        return $$ = { type: 'function', id: $2, params: $4, statements: $7 };
      case 14:
        return $$ = { type: 'return', expression: $2 };
      case 15:
        return $$ = $1;
      case 16:
        return $$ = [];
      case 17:
        return $$ = [$1].concat($3);
      case 18:
        return $$ = [$1];
      case 19:
        return $$ = { type: '>', left: $1, right: $3 };
      case 20:
        return $$ = { type: '<', left: $1, right: $3 };
      case 21:
        return $$ = { type: '<=', left: $1, right: $3 };
      case 22:
        return $$ = { type: '>=', left: $1, right: $3 };
      case 23:
        return $$ = { type: '==', left: $1, right: $3 };
      case 24:
        return $$ = { type: '<>', left: $1, right: $3 };
      case 25:
        return $$ = $1;
      case 26:
        return $$ = { type: '+', left: $1, right: $3 };
      case 27:
        return $$ = { type: '-', left: $1, right: $3 };
      case 28:
        return $$ = { type: '&', left: $1, right: $3 };
      case 29:
        return $$ = $1;
      case 30:
        return $$ = { type: '*', left: $1, right: $3 };
      case 31:
        return $$ = { type: '/', left: $1, right: $3 };
      case 32:
        return $$ = $1;
      case 33:
        return $$ = { type: '-', value: $2 };
      case 34:
        return $$ = $1;
      case 35:
        return $$ = { type: 'id', value: $1 };
      case 36:
        return $$ = { type: 'string', value: $1 };
      case 37:
        return $$ = { type: 'number', value: $1 };
      case 38:
        return $$ = { type: 'function_call', id: $1, args: $3 };
      case 39:
        return $$ = $2;
      case 40:
        return $$ = $1;
      case 41:
        return $$ = [];
      case 42:
        return $$ = [$1].concat($3);
      case 43:
        return $$ = [$1];
    }
  },
  "table": {
    "0": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "EOF": 1
      }
    ],
    "1": [
      {
        "$accept": 0
      }
    ],
    "2": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "EOF": 1
      }
    ],
    "3": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 13
      }
    ],
    "4": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      }
    ],
    "5": [
      {
        "PRINT": 14
      },
      {
        "LOOP": 15
      },
      {
        "WHILE": 16
      },
      {
        "IF": 17
      },
      {
        "FUNCTION": 18
      },
      {
        "RETURN": 19
      },
      {
        "BEGIN": 20
      }
    ],
    "6": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "7": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "8": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "9": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "10": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "11": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "12": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 22
      }
    ],
    "13": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "EOF": 1
      }
    ],
    "14": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "15": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      }
    ],
    "16": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "17": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "18": [
      {
        "id": 23
      }
    ],
    "19": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "20": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 24
      }
    ],
    "21": [
      {
        "PRINT": 25
      },
      {
        "LOOP": 26
      },
      {
        "WHILE": 27
      },
      {
        "IF": 28
      },
      {
        "FUNCTION": 29
      },
      {
        "RETURN": 30
      },
      {
        "BEGIN": 31
      },
      {
        "ID": 32
      },
      {
        "STRING": 33
      },
      {
        "NUMBER": 34
      },
      {
        "(": 35
      }
    ],
    "22": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "EOF": 1
      }
    ],
    "23": [
      {
        "(": 36
      }
    ],
    "24": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 22
      }
    ],
    "25": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "26": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      }
    ],
    "27": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "28": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "29": [
      {
        "id": 23
      }
    ],
    "30": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "31": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 37
      }
    ],
    "32": [
      {
        "=": 38
      },
      {
        "(": 39
      }
    ],
    "33": [
      {
        "PRINT": 40
      },
      {
        "LOOP": 41
      },
      {
        "WHILE": 42
      },
      {
        "IF": 43
      },
      {
        "FUNCTION": 44
      },
      {
        "RETURN": 45
      },
      {
        "BEGIN": 46
      }
    ],
    "34": [
      {
        "PRINT": 40
      },
      {
        "LOOP": 41
      },
      {
        "WHILE": 42
      },
      {
        "IF": 43
      },
      {
        "FUNCTION": 44
      },
      {
        "RETURN": 45
      },
      {
        "BEGIN": 46
      }
    ],
    "35": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "36": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "37": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 22
      }
    ],
    "38": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "39": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "40": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "41": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      }
    ],
    "42": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "43": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "44": [
      {
        "id": 23
      }
    ],
    "45": [
      {
        "number": 21
      },
      {
        "string": 21
      },
      {
        "id": 21
      },
      {
        "(": 21
      }
    ],
    "46": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 47
      }
    ],
    "47": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "EOF": 1
      }
    ],
    "48": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 47
      }
    ],
    "49": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {
        "loop": 7
      },
      {
        "while": 8
      },
      {
        "if": 9
      },
      {
        "function": 10
      },
      {
        "return": 11
      },
      {
        "begin": 12
      },
      {
        "end": 47
      }
    ],
    "50": [
      {
        "number": 5
      },
      {
        "string": 5
      },
      {
        "id": 5
      },
      {
        "print": 6
      },
      {